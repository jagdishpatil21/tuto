#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

class Item {
public:
    char name[10];
    int quantity;
    int cost;
    int code;

    bool operator==(const Item& i1) const {
        return code == i1.code;
    }

    bool operator<(const Item& i1) const {
        return code < i1.code;
    }
};

vector<Item> o1;

void print(const Item& i1);
void display();
void insert();
void search();
bool compare(const Item& i1, const Item& i2);

int main() {
    int ch;

    do {
        cout << "\n***** Menu *****";
        cout << "\n1.Insert";
        cout << "\n2.Display";
        cout << "\n3.Search";
        cout << "\n4.Sort";
        cout << "\n5.Exit";
        cout << "\nEnter your choice:";
        cin >> ch;

        switch(ch) {
            case 1:
                insert();
                break;

            case 2:
                display();
                break;

            case 3:
                search();
                break;

            case 4:
                sort(o1.begin(), o1.end(), compare);
                cout << "\n\n Sorted on Cost";
                display();
                break;

            case 5:
                exit(0);
        }

    } while (ch != 5);

    return 0;
}

void insert() {
    Item i1;
    cout << "\nEnter Item Name:";
    cin >> i1.name;
    cout << "\nEnter Item Quantity:";
    cin >> i1.quantity;
    cout << "\nEnter Item Cost:";
    cin >> i1.cost;
    cout << "\nEnter Item Code:";
    cin >> i1.code;
    o1.push_back(i1);
}

void display() {
    for_each(o1.begin(), o1.end(), print);
}

void print(const Item& i1) {
    cout << "\n";
    cout << "\nItem Name:" << i1.name;
    cout << "\nItem Quantity:" << i1.quantity;
    cout << "\nItem Cost:" << i1.cost;
    cout << "\nItem Code:" << i1.code;
}

void search() {
    Item i1;
    cout << "\nEnter Item Code to search:";
    cin >> i1.code;

    auto p = find(o1.begin(), o1.end(), i1);

    if (p == o1.end()) {
        cout << "\nNot found.";
    } else {
        cout << "\nFound.";
    }
}

bool compare(const Item& i1, const Item& i2) {
    return i1.cost < i2.cost;
}



























Algorithm :

Initialize a vector of Item objects:

vector<Item> o1;
Display a menu in a loop until the user chooses to exit:

Display options: Insert, Display, Search, Sort, Exit.
Take user input for the choice.
Implement Insert Option:

Create an Item object i1.
Take user input for item details (name, quantity, cost, code).
Push the i1 object into the vector o1 using o1.push_back(i1);.
Implement Display Option:

Use a loop to iterate over the vector o1.
For each Item in the vector, call the print function to display its details.
Implement Search Option:

Create an Item object i1.
Take user input for the item code to search.
Use the find function to search for the item in the vector.
Display "Found" or "Not found" based on the result.
Implement Sort Option:

Use the sort function to sort the vector o1 based on the cost using the compare function.
Display the sorted items using the display function.
Exit Option:

Exit the program.

TC :
Insertion: O(1) (amortized)
Display: O(n)
Search: O(n)
Sort: O(n log n)

























Explanation :

1. **Header Includes:**
   ```cpp
   #include <iostream>
   #include <algorithm>
   #include <vector>
   ```
   - Includes necessary header files for input-output operations, algorithms, and vectors.

2. **Item Class Definition:**
   ```cpp
   class Item {
   public:
       char name[10];
       int quantity;
       int cost;
       int code;

       bool operator==(const Item& i1) const {
           return code == i1.code;
       }

       bool operator<(const Item& i1) const {
           return code < i1.code;
       }
   };
   ```
   - Defines a class named `Item` with data members: `name`, `quantity`, `cost`, and `code`.
   - Overloads the `==` and `<` operators to compare `Item` objects.

3. **Global Vector Declaration:**
   ```cpp
   vector<Item> o1;
   ```
   - Declares a global vector `o1` to store objects of the `Item` class.

4. **Function Declarations:**
   ```cpp
   void print(const Item& i1);
   void display();
   void insert();
   void search();
   bool compare(const Item& i1, const Item& i2);
   ```
   - Function prototypes for printing, displaying, inserting, searching, and comparing.

5. **Main Function:**
   ```cpp
   int main() {
   ```
   - Starts the `main` function.

6. **Menu Handling using a Do-While Loop:**
   ```cpp
   do {
   ```
   - Initiates a do-while loop for displaying a menu until the user chooses to exit.

7. **Menu Options and User Input:**
   ```cpp
   cout << "\n***** Menu *****";
   cout << "\n1.Insert";
   cout << "\n2.Display";
   cout << "\n3.Search";
   cout << "\n4.Sort";
   cout << "\n5.Exit";
   cout << "\nEnter your choice:";
   cin >> ch;
   ```
   - Displays menu options and takes user input for the choice.

8. **Switch Statement for Menu Options:**
   ```cpp
   switch (ch) {
       case 1:
           insert();
           break;
       case 2:
           display();
           break;
       case 3:
           search();
           break;
       case 4:
           sort(o1.begin(), o1.end(), compare);
           cout << "\n\n Sorted on Cost";
           display();
           break;
       case 5:
           exit(0);
   }
   ```
   - Implements switch cases for different menu options.

9. **Closing Main Function:**
   ```cpp
   } while (ch != 5);
   return 0;
   ```
   - Closes the `main` function and the program.

10. **Function Definitions:**
    - **Insert Function (`void insert()`):**
      - Takes user input for an `Item`, creates an object, and adds it to the vector `o1`.

    - **Display Function (`void display()`):**
      - Prints each element of the vector using the `print` function.

    - **Print Function (`void print(const Item& i1)`):**
      - Prints details of an `Item` object.

    - **Search Function (`void search()`):**
      - Takes user input for an item code and searches for it in the vector `o1`.

    - **Compare Function (`bool compare(const Item& i1, const Item& i2)`):**
      - Compares `Item` objects based on their costs for sorting.




























STL (Standard Template Library):
STL stands for the Standard Template Library in C++. It is a powerful set of C++ template classes to provide general-purpose classes and functions with templates that implement many popular and commonly used algorithms and data structures.

Four Components of STL:

Algorithms: A set of powerful template functions to perform operations on sequences of elements, such as sorting, searching, and manipulation.
Containers: Pre-built classes to hold and manipulate collections of data, like vectors, lists, and queues.
Functions: Function objects or functors that can be used as arguments to algorithms.
Iterators: Objects that allow the traversal of elements in a container, enabling algorithms to work with different data structures.
Sorting:
Sorting is the process of arranging elements in a specific order, typically ascending or descending. In C++, the STL provides the std::sort algorithm, which can be used to sort elements in a range defined by iterators.

Searching:
Searching involves finding the position or existence of a particular element in a collection. The STL provides algorithms like std::find for linear search and std::binary_search for binary search. Containers like vectors and arrays need to be sorted before using binary search.

Vector Container:
In C++, a vector is a dynamic array that can grow or shrink in size. It is part of the STL and is implemented as the std::vector template class. Vectors provide fast access to elements and efficient insertion and deletion at the end. They are useful when a dynamic array with automatic resizing is needed.





