#include<iostream>
using namespace std;
class complex
{
    private:float R,I;
    public: complex();
            friend istream & operator >>(istream &, complex &);
            friend ostream & operator <<(ostream &,complex &);
            complex operator +(complex &);
            complex operator *(complex &);
};
complex::complex()
{
    R=0;
    I=0;
}
istream & operator >>(istream &in, complex &c)
{
    cout<<"\n Enter Real :";
    in>>c.R;     cout<<"\n Enter Imaginary :";
    in>>c.I;
    return in;
}
ostream & operator <<(ostream &out,complex &c)
{
    out<<"\t"<<c.R<<" + i"<<c.I;
    return out;
}
complex complex:: operator +(complex &c)
{
    complex temp;
    temp.R=this->R+c.R;
    temp.I=this->I+c.I;
    return temp;
} 
complex complex:: operator *(complex &c)
{
    complex temp;
    temp.R=(this->R*c.R)-(this->I*c.I);
    temp.I=(this->R*c.I)+(this->I*c.R);
    return temp;
}
int main()
{
    complex c1,c2,c3;
    cout<<c1;
    cout<<"\n Enter First complex Number :";
    cin>>c1;
    cout<<"\n Enter Second complex Number :";
    cin>>c2;
    cout<<c1;
    cout<<c2;
    
    c3=c1+c2;
    
    cout<<"\n Addition : "<<c3;
    
    c3=c1*c2; 
    
    cout<<"\n Multiplication : "<<c3;
 }





























Algorithm:
Step 1: Start the program
Step 2: Create a class complex
Step 3: Define the default constructor.
Step 4: Declare the operator function which are going to be overloaded and display function Step
5: Define the overloaded functions such as +, -,/,* and the display function 
For Addition: (a+bi) + (x + yi) = ((a+x)+(b+y)i)
For Multiplication: (a+bi) * (x + yi) = (((a*x)-(b*y)) + ((a*y) + (x*b))i)
Step 6: Create objects for complex class in main() function
Step 7:Create a menu for addition, multiplication of complex numbersand display the result Step
8: Depending upon the choice from the user the arithmetic operators will invoke the overloaded
operator automatically and returns the result
Step 9: Display the result using display function.









































Explantion :

Sure, let's go through the code line by line:

1. `#include<iostream>`: This line includes the input/output stream header file, which allows you to use functions like `cout` and `cin`.

2. `using namespace std;`: This line indicates that you're using the standard namespace, which includes standard C++ functions and objects.

3. `class complex { /* ... */ };`: This defines a class named `complex`. It is used to represent complex numbers and has private data members `R` and `I` representing the real and imaginary parts.

4. `private: float R, I;`: These are private data members of the class representing the real (`R`) and imaginary (`I`) parts of a complex number.

5. `public: complex(); /* ... */`: This declares a public constructor for the `complex` class, initializing `R` and `I` to 0.

6. `friend istream & operator >>(istream &, complex &);`: This declares a friend function for input (>>) operator, allowing it to access private members of the `complex` class.

7. `friend ostream & operator <<(ostream &, complex &);`: This declares a friend function for the output (<<) operator, allowing it to access private members of the `complex` class.

8. `complex operator +(complex &);`: This declares a member function for the addition operator (+) that adds two complex numbers.

9. `complex operator *(complex &);`: This declares a member function for the multiplication operator (*) that multiplies two complex numbers.

10. `complex::complex() { /* ... */ }`: This is the implementation of the constructor for the `complex` class. It initializes the real and imaginary parts to 0.

11. `istream & operator >>(istream &in, complex &c) { /* ... */ }`: This is the implementation of the input operator (>>) for the `complex` class. It allows the user to input values for the real and imaginary parts.

12. `ostream & operator <<(ostream &out, complex &c) { /* ... */ }`: This is the implementation of the output operator (<<) for the `complex` class. It allows you to display the complex number.

13. `complex complex::operator +(complex &c) { /* ... */ }`: This is the implementation of the addition operator (+) for the `complex` class. It adds two complex numbers and returns the result.

14. `complex complex::operator *(complex &c) { /* ... */ }`: This is the implementation of the multiplication operator (*) for the `complex` class. It multiplies two complex numbers and returns the result.

15. `int main() { /* ... */ }`: This is the main function where the program execution begins.

16. `complex c1, c2, c3;`: Declares three complex number objects: `c1`, `c2`, and `c3`.

17. `cout << c1;`: Displays the initial values of `c1` (which are 0 + i0).

18. `cin >> c1;`: Allows the user to input values for the real and imaginary parts of `c1`.

19. `cout << c2;`: Displays the initial values of `c2` (which are 0 + i0).

20. `cin >> c2;`: Allows the user to input values for the real and imaginary parts of `c2`.

21. `c3 = c1 + c2;`: Adds `c1` and `c2` using the overloaded addition operator and stores the result in `c3`.

22. `cout << "Addition : " << c3;`: Displays the result of the addition operation.

23. `c3 = c1 * c2;`: Multiplies `c1` and `c2` using the overloaded multiplication operator and stores the result in `c3`.

24. `cout << "Multiplication : " << c3;`: Displays the result of the multiplication operation.

That's the explanation of the code! It's a simple program that demonstrates operator overloading for complex numbers.